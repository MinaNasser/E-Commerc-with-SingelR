@model EShop.ViewModels.ProductDetailsViewModel

@{
	ViewData["Title"] = "Product Details";
}

<div class="container my-5">
	<div class="card shadow rounded-4 p-4">
		<div class="row g-4">
			<!-- Product Image -->
			<div class="col-md-5">
				@if (Model.Images != null && Model.Images.Count > 0)
				{
					<img src="@Model.Images[0]" class="img-fluid rounded-3 shadow-sm w-100 h-100 object-fit-cover" alt="Product Image" />
				}
			</div>

			<!-- Product Details -->
			<div class="col-md-7">
				<h2 class="text-primary">@Model.Name</h2>
				<p class="text-muted">@Model.Description</p>

				<ul class="list-group list-group-flush mb-3">
					<li class="list-group-item"><strong>Category:</strong> @Model.CategoryName</li>
					<li class="list-group-item"><strong>Vendor:</strong> @Model.VendorName</li>
					<li class="list-group-item"><strong>Price:</strong> @Model.Price.ToString("F2") EGP</li>
					<li class="list-group-item">
						<strong>Quantity:</strong> <span id="currentQuantity">@Model.Quantity</span>
					</li>

					@* <li class="list-group-item"><strong>Created At:</strong> @Model.CreatedAt.ToString("g")</li> *@
				</ul>

				<div class="d-flex align-items-center mt-3">
					<label for="qty" class="form-label me-2"><strong>Quantity:</strong></label>
					<input type="number" id="qty" value="1" min="1" max="@Model.Quantity" class="form-control w-25 me-3" />
					<button onclick="buyProduct()" class="btn btn-warning">Buy</button>
				</div>
			</div>
		</div>
	</div>

	<hr class="my-5" />

	<!-- Comments Section -->
	<div class="card shadow p-4 rounded-4">
		<h4 class="mb-3">Comments</h4>

		<div class="row mb-3">
			<div class="col-md-6">
				<label for="username" class="form-label">Your Name:</label>
				<input type="text" id="username" class="form-control" placeholder="Enter your name" />
			</div>
			<div class="col-md-12 mt-3">
				<label for="comment" class="form-label">Write a Comment:</label>
				<textarea id="comment" class="form-control" rows="3" placeholder="Type something..."></textarea>
			</div>
		</div>

		<button onclick="sendComment()" class="btn btn-success">Send</button>

		<ul id="commentList" class="list-group mt-4">
			@foreach (var c in Model.Comments)
			{
				<li class="list-group-item">
					<strong>@c.UserName</strong> (@c.CreatedAt.ToString("g")):<br />
					@c.Message
				</li>
			}
		</ul>
	</div>
</div>

@section Scripts {
	<script src=""></script>
	<script src="~/lib/microsoft-signalr/signalr.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

	<script>
		var productId = @Model.Id;
		var connection = new signalR.HubConnectionBuilder()
			.withUrl("/commentHub")
			.build();

		// Start connection
		connection.start().then(function () {
			console.log(" SignalR connected.");
			connection.invoke("JoinProductGroup", productId);
		}).catch(function (err) {
			console.error("SignalR connection error:", err);
		});

		// Receive comment from others
		connection.on("ReceiveComment", function (user, msg, time) {
			const li = `<li class="list-group-item"><strong>${user}</strong> (${time}):<br/>${msg}</li>`;
			document.getElementById("commentList").innerHTML += li;
		});

		// Send comment
		async function sendComment() {
			const user = document.getElementById("username").value.trim();
			const msg = document.getElementById("comment").value.trim();

			if (!user || !msg) {
				alert("Please enter your name and comment.");
				return;
			}

			if (connection.state !== signalR.HubConnectionState.Connected) {
				alert("SignalR not connected yet. Please wait...");
				return;
			}

			try {
				await connection.invoke("SendComment", productId, user, msg);
				document.getElementById("comment").value = "";
			} catch (err) {
				console.error("Error while sending comment:", err);
				alert("Failed to send comment.");
			}
		}


						var buyConnection = new signalR.HubConnectionBuilder()
			.withUrl("/BayProductHupU")
			.build();

		// استقبال التحديث
		buyConnection.on("UpdateProductQuantity", function (productId, newQty) {
			document.getElementById("qty").max = newQty;
			const quantityItem = Array.from(document.querySelectorAll(".list-group-item"))
				.find(el => el.textContent.includes("Quantity:"));
			if (quantityItem) {
				quantityItem.innerHTML = `<strong>Quantity:</strong> ${newQty}`;
			}
		});



						async function buyProduct() {
			const qty = parseInt(document.getElementById("qty").value);
			if (!qty || qty < 1) {
				alert("Enter a valid quantity.");
				return;
			}

			if (qty > @Model.Quantity) {
				alert("Not enough stock available.");
				return;
			}

			try {
				if (buyConnection.state !== signalR.HubConnectionState.Connected) {
					await buyConnection.start(); // ✅ حاول تعمل الاتصال لو لسه مش متصل
				}

				await buyConnection.invoke("BuyProduct", productId, qty);
				Swal.fire({
					icon: 'success',
					title: 'Success!',
					text: 'Purchase completed successfully!'
				});
			} catch (err) {
				console.error("BuyProduct error:", err);
				Swal.fire({
					icon: 'error',
					title: 'Oops...',
					text: 'Failed to complete purchase.'
				});
			}
		}


	</script>
}

